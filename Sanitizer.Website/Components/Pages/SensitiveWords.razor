@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.QuickGrid
@using Sanitizer.Core.Models
@using Sanitizer.Website.Components.Components
@using System.Timers
@inject IHttpClientFactory HttpClientFactory
@page "/"

<PageTitle>Sensitive Words</PageTitle>

<div class="container">
    <div class="row">
        <div class="col">
            <Alert @ref="_alert" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <ConfirmationModal @ref="_deleteConfirmation" Title="Delete Confirmation" />
            <ConfirmationModal @ref="_editConfirmation" Title="Submit Confirmation" />
        </div>
    </div>
    @if (_editingItem)
    {
        <EditForm Model="Update" OnSubmit="ShowSubmitConfirmation" FormName="EditWord">
            <div class="form-group">
                <label> Old Word: @Update.OldWord</label>
                <br>
                <label> New Word: <InputText @bind-Value="Update.NewWord" /> </label>
            </div>
            <div style="margin-top: 10px">
                <button type="submit" class="btn btn-primary">Submit</button>
                <button @onclick="@(() => Cancel())" class="btn btn-secondary">Cancel</button>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row">
            <div class="col-md-4">
                <input type="text" class="form-control" @bind="_searchValue" @oninput="HandleDelayedSearch" placeholder="Search/Add..." />
            </div>
            <div class="col-md-2">
                <button class="btn btn-success" @onclick="() => Create(_search)">Add</button>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <QuickGrid ItemsProvider="sensitiveWordsProvider" Pagination="@pagination" @ref="grid">
                    <PropertyColumn Title="Word" Property="@(c => c)" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Ascending" />
                    <TemplateColumn Title="Action">
                        <button @onclick="@(() => Edit(context))" class="btn btn-primary">Edit</button>
                        <button @onclick="@(() => ShowDeleteConfirmation(context))" class="btn btn-danger">Delete</button>
                    </TemplateColumn>
                </QuickGrid>
                @if (_isLoading)
                {
                    <div class="text-center">Loading...</div>
                }
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <Paginator State="@pagination" />
            </div>
        </div>
    }
</div>






@code {
    [SupplyParameterFromForm]
    public SensitiveWord? Update { get; set; }
    private ConfirmationModal _deleteConfirmation;
    private ConfirmationModal _editConfirmation;
    QuickGrid<string>? grid;
    private Alert _alert;
    GridItemsProvider<string>? sensitiveWordsProvider;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    HttpClient? httpClient;
    private string _search = "";
    private string _searchValue = "";
    private System.Threading.Timer _searchTimer;
    private int _delayMilliseconds = 300;
    private bool _editingItem = false;
    private bool _isLoading = false;
    private Timer _loadingTimer;

    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("SensitiveWordsApi");
        await RefreshData();
    }

    private async Task RefreshData()
    {
        sensitiveWordsProvider = async req =>
        {
            StartLoadingTimer();
            var page = (req.StartIndex / pagination.ItemsPerPage) + 1;
            var sortOrder = req.SortByAscending ? 1 : -1;
            try
            {

                var response = await httpClient.GetFromJsonAsync<PaginationResponse<string>>($"GetWordsList?page={page}&pageSize={pagination.ItemsPerPage}&sortOrder={sortOrder}&search={_search}");

                if (response == null)
                {
                    return GridItemsProviderResult.From(Array.Empty<string>(), 0);
                }
                return GridItemsProviderResult.From(
                items: response.Data,
                totalItemCount: response.TotalCount);
            }
            catch (Exception ex)
            {
                StopLoadingTimer();
                _alert.Message = "An error has occured while loading the Sensitive Words";
                _alert.Show();
                _isLoading = false;
                return GridItemsProviderResult.From(Array.Empty<string>(), 0);
            }
            finally
            {
                StopLoadingTimer();
                _isLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        };
    }

    private async Task HandleDelayedSearch(ChangeEventArgs e)
    {
        var searchVal = e.Value?.ToString() ?? ""; // Update the _search variable with the input value

        // Clear the existing timer
        _searchTimer?.Dispose();

        // Create a new timer that triggers the search after the specified delay
        _searchTimer = new System.Threading.Timer(async state =>
        {
            _search = searchVal;
            await RefreshData();
            await InvokeAsync(StateHasChanged);
        }, null, _delayMilliseconds, Timeout.Infinite);
    }

    private async Task StartLoadingTimer()
    {
        _isLoading = false;
        _loadingTimer = new Timer(500);
        _loadingTimer.Elapsed += OnLoadingTimerElapsed;
        _loadingTimer.AutoReset = false;
        _loadingTimer.Start();
    }

    private async void OnLoadingTimerElapsed(object sender, ElapsedEventArgs e)
    {
        _isLoading = true;
        await InvokeAsync(StateHasChanged);
    }

    private void StopLoadingTimer()
    {
        if (_loadingTimer != null)
        {
            _loadingTimer.Stop();
            _loadingTimer.Dispose();
            _isLoading = false;
        }
    }
    private async Task Edit(string edited)
    {
        _editingItem = true;
        Update = new SensitiveWord(edited, "");
    }

    private async Task ShowSubmitConfirmation()
    {
        _editConfirmation.Message = "Are you sure you want to edit this item?";
        _editConfirmation.OnConfirmed = async (confirmed) =>
        {
            if (confirmed)
            {
                await Submit();
            }

        };
        _editConfirmation.Show();
    }

    private async Task ShowDeleteConfirmation(string word)
    {
        _deleteConfirmation.Message = "Are you sure you want to delete this item?";
        _deleteConfirmation.OnConfirmed = async (confirmed) =>
        {
            if (confirmed)
            {
                await Delete(word);
            }

        };
        _deleteConfirmation.Show();
    }

    private async Task Submit()
    {
        var response = await httpClient.PutAsJsonAsync<SensitiveWord>("", Update);
        if (!response.IsSuccessStatusCode)
        {
            Update.NewWord = "";
            _alert.Message = await response.Content.ReadAsStringAsync();
            _alert.Show();
        }
        _search = "";
        _searchValue = "";
        _editingItem = false;
        await RefreshData();
        StateHasChanged();
    }

    private async Task Cancel()
    {
        _editingItem = false;
    }

    private async Task Create(string create)
    {
        _editingItem = false;
        var response = await httpClient.PostAsJsonAsync("", create);
        if (!response.IsSuccessStatusCode)
        {
            _alert.Message = await response.Content.ReadAsStringAsync();
            _alert.Show();
        }
        else
        {
            await RefreshData();
        }
    }

    private async Task Delete(string deleted)
    {
        await httpClient.DeleteAsync($"?sensitiveWord={deleted}");
        await RefreshData();
        StateHasChanged();
    }
}
